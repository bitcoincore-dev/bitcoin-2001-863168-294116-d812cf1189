# Copyright (c) 2023-present The Bitcoin Core developers
# Distributed under the MIT software license, see the accompanying
# file COPYING or https://opensource.org/license/mit/.

# This file is expected to be highly volatile and may still change substantially.

set(CMAKE_SYSTEM_NAME @host_system@)
set(CMAKE_SYSTEM_PROCESSOR @host_arch@)

function(split_compiler_launcher env_compiler launcher compiler)
  set(${launcher})
  list(GET ${env_compiler} 0 start_token)
  if(start_token STREQUAL "env")
    set(${compiler})
    set(env_arg_parsing TRUE)
    foreach(token IN LISTS ${env_compiler})
      if(env_arg_parsing)
        list(APPEND ${launcher} ${token})
        set(env_arg_parsing FALSE)
        continue()
      elseif(token STREQUAL "-u")
        list(APPEND ${launcher} ${token})
        set(env_arg_parsing TRUE)
        continue()
      endif()
      list(APPEND ${compiler} ${token})
    endforeach()
  else()
    set(${compiler} ${${env_compiler}})
  endif()
  set(${launcher} ${${launcher}} PARENT_SCOPE)
  set(${compiler} ${${compiler}} PARENT_SCOPE)
endfunction()

if(NOT CMAKE_C_COMPILER)
  set(DEPENDS_C_COMPILER_WITH_LAUNCHER @CC@)
  split_compiler_launcher(DEPENDS_C_COMPILER_WITH_LAUNCHER CMAKE_C_COMPILER_LAUNCHER CMAKE_C_COMPILER)
  set(CMAKE_C_LINKER_LAUNCHER ${CMAKE_C_COMPILER_LAUNCHER})
  set(DEPENDS_C_COMPILER_FLAGS @CFLAGS@)
endif()

if(NOT CMAKE_CXX_COMPILER)
  set(DEPENDS_CXX_COMPILER_WITH_LAUNCHER @CXX@)
  split_compiler_launcher(DEPENDS_CXX_COMPILER_WITH_LAUNCHER CMAKE_CXX_COMPILER_LAUNCHER CMAKE_CXX_COMPILER)
  set(CMAKE_CXX_LINKER_LAUNCHER ${CMAKE_CXX_COMPILER_LAUNCHER})
  set(DEPENDS_CXX_COMPILER_FLAGS @CXXFLAGS@)

  set(CMAKE_OBJCXX_COMPILER ${CMAKE_CXX_COMPILER})
  set(CMAKE_OBJCXX_COMPILER_LAUNCHER ${CMAKE_CXX_COMPILER_LAUNCHER})
  set(CMAKE_OBJCXX_LINKER_LAUNCHER ${CMAKE_CXX_LINKER_LAUNCHER})
endif()

set(DEPENDS_COMPILE_DEFINITIONS @CPPFLAGS@)

set(CMAKE_AR "@AR@")
set(CMAKE_RANLIB "@RANLIB@")
set(CMAKE_STRIP "@STRIP@")
set(CMAKE_OBJCOPY "@OBJCOPY@")
set(CMAKE_INSTALL_NAME_TOOL "@INSTALL_NAME_TOOL@")
set(OTOOL "@OTOOL@")

# Using our own built dependencies should not be
# affected by a potentially random environment.
set(CMAKE_FIND_USE_CMAKE_ENVIRONMENT_PATH OFF)

set(CMAKE_FIND_ROOT_PATH "@depends_prefix@")
set(CMAKE_FIND_ROOT_PATH_MODE_PROGRAM NEVER)
set(CMAKE_FIND_ROOT_PATH_MODE_LIBRARY ONLY)
set(CMAKE_FIND_ROOT_PATH_MODE_INCLUDE ONLY)
set(CMAKE_FIND_ROOT_PATH_MODE_PACKAGE ONLY)
set(PKG_CONFIG_PATH "@depends_prefix@/lib/pkgconfig")
set(PKG_CONFIG_LIBDIR "${PKG_CONFIG_PATH}")
set(QT_TRANSLATIONS_DIR "@depends_prefix@/translations")

if(CMAKE_SYSTEM_NAME STREQUAL "Darwin" AND NOT CMAKE_HOST_APPLE)
  # The find_package(Qt ...) function internally uses find_library()
  # calls for all dependencies to ensure their availability.
  # In turn, the find_library() inspects the well-known locations
  # on the file system; therefore, a hint is required.
  set(CMAKE_FRAMEWORK_PATH "@OSX_SDK@/System/Library/Frameworks")
endif()

# Ensure that the docstrings in the following `set(... CACHE ...)`
# commands match those in the root CMakeLists.txt file.

if(NOT WITH_GUI AND "@no_qt@" STREQUAL "1")
  set(WITH_GUI OFF CACHE STRING "Build GUI.")
endif()

if(NOT WITH_QRENCODE AND "@no_qr@" STREQUAL "1")
  set(WITH_QRENCODE OFF CACHE STRING "Enable QR code support.")
endif()

if(NOT WITH_ZMQ AND "@no_zmq@" STREQUAL "1")
  set(WITH_ZMQ OFF CACHE STRING "Enable ZMQ notifications.")
endif()

if(NOT ENABLE_WALLET AND "@no_wallet@" STREQUAL "1")
  set(ENABLE_WALLET OFF CACHE BOOL "Enable wallet.")
endif()

if(NOT WITH_BDB AND "@no_bdb@" STREQUAL "1")
  set(WITH_BDB OFF CACHE STRING "Enable Berkeley DB (BDB) wallet support.")
endif()

if(NOT WITH_SQLITE AND "@no_sqlite@" STREQUAL "1")
  set(WITH_SQLITE OFF CACHE STRING "Enable SQLite wallet support.")
endif()

if(NOT WITH_MINIUPNPC AND "@no_upnp@" STREQUAL "1")
  set(WITH_MINIUPNPC OFF CACHE STRING "Enable UPnP.")
endif()

if(NOT WITH_NATPMP AND "@no_natpmp@" STREQUAL "1")
  set(WITH_NATPMP OFF CACHE STRING "Enable NAT-PMP.")
endif()

if(NOT WITH_USDT AND "@no_usdt@" STREQUAL "1")
  set(WITH_USDT OFF CACHE STRING "Enable tracepoints for Userspace, Statically Defined Tracing.")
endif()

if(NOT HARDENING AND "@no_harden@" STREQUAL "1")
  set(HARDENING OFF CACHE STRING "Attempt to harden the resulting executables.")
endif()
